{
  "swagger": "2.0",
  "info": {
    "title": "ML service",
    "description": "API specification for the Azure Machine Learning service ML service",
    "version": "1.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "For example: Bearer abc123"
    }
  },
  "paths": {
    "/": {
      "get": {
        "operationId": "ServiceHealthCheck",
        "description": "Simple health check endpoint to ensure the service is up at any given point.",
        "responses": {
          "200": {
            "description": "If service is up and running, this response will be returned with the content 'Healthy'",
            "schema": {
              "type": "string"
            },
            "examples": {
              "application/json": "Healthy"
            }
          },
          "default": {
            "description": "The service failed to execute due to an error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/score": {
      "post": {
        "operationId": "RunMLService",
        "description": "Run web service's model and get the prediction output",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "serviceInputPayload",
            "in": "body",
            "description": "The input payload for executing the real-time machine learning service.",
            "schema": {
              "$ref": "#/definitions/ServiceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The service processed the input correctly and provided a result prediction, if applicable.",
            "schema": {
              "$ref": "#/definitions/ServiceOutput"
            }
          },
          "default": {
            "description": "The service failed to execute due to an error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "operationId": "GetSwaggerSpec",
        "description": "Get the Swagger specification.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "integer",
            "enum": [
              2,
              3
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The Swagger specification.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "The service failed to execute due to an error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ServiceInput": {
      "type": "object",
      "properties": {
        "Inputs": {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "Category",
                  "Product",
                  "Company",
                  "Date",
                  "test_feat1",
                  "test_feat2",
                  "test_feat3"
                ],
                "properties": {
                  "Category": {
                    "type": "string"
                  },
                  "Product": {
                    "type": "string"
                  },
                  "Company": {
                    "type": "string"
                  },
                  "Date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "test_feat1": {
                    "type": "number",
                    "format": "double"
                  },
                  "test_feat2": {
                    "type": "number",
                    "format": "double"
                  },
                  "test_feat3": {
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "format": "pandas.DataFrame:records"
            }
          }
        },
        "GlobalParameters": {
          "type": "object",
          "required": [
            "quantiles"
          ],
          "properties": {
            "quantiles": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      },
      "example": {
        "Inputs": {
          "data": [
            {
              "Category": "example_value",
              "Product": "example_value",
              "Company": "example_value",
              "Date": "2000-01-01T00:00:00.000Z",
              "test_feat1": 0.0,
              "test_feat2": 0.0,
              "test_feat3": 0.0
            }
          ]
        },
        "GlobalParameters": {
          "quantiles": [
            0.025,
            0.975
          ]
        }
      }
    },
    "ServiceOutput": {
      "type": "object",
      "required": [
        "Results"
      ],
      "properties": {
        "Results": {
          "type": "object",
          "required": [
            "forecast",
            "prediction_interval",
            "index"
          ],
          "properties": {
            "forecast": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              },
              "format": "numpy.ndarray"
            },
            "prediction_interval": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              },
              "format": "numpy.ndarray"
            },
            "index": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "format": "pandas.DataFrame:records"
            }
          }
        }
      },
      "example": {
        "Results": {
          "forecast": [
            0.0
          ],
          "prediction_interval": [
            0.0
          ],
          "index": []
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}